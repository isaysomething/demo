// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthItems(t *testing.T) {
	t.Parallel()

	query := AuthItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthItemExists to return true, but got false.")
	}
}

func testAuthItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authItemFound, err := FindAuthItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authItemOne := &AuthItem{}
	authItemTwo := &AuthItem{}
	if err = randomize.Struct(seed, authItemOne, authItemDBTypes, false, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}
	if err = randomize.Struct(seed, authItemTwo, authItemDBTypes, false, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authItemOne := &AuthItem{}
	authItemTwo := &AuthItem{}
	if err = randomize.Struct(seed, authItemOne, authItemDBTypes, false, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}
	if err = randomize.Struct(seed, authItemTwo, authItemDBTypes, false, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func authItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthItem) error {
	*o = AuthItem{}
	return nil
}

func testAuthItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthItem{}
	o := &AuthItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthItem object: %s", err)
	}

	AddAuthItemHook(boil.BeforeInsertHook, authItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authItemBeforeInsertHooks = []AuthItemHook{}

	AddAuthItemHook(boil.AfterInsertHook, authItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authItemAfterInsertHooks = []AuthItemHook{}

	AddAuthItemHook(boil.AfterSelectHook, authItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authItemAfterSelectHooks = []AuthItemHook{}

	AddAuthItemHook(boil.BeforeUpdateHook, authItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authItemBeforeUpdateHooks = []AuthItemHook{}

	AddAuthItemHook(boil.AfterUpdateHook, authItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authItemAfterUpdateHooks = []AuthItemHook{}

	AddAuthItemHook(boil.BeforeDeleteHook, authItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authItemBeforeDeleteHooks = []AuthItemHook{}

	AddAuthItemHook(boil.AfterDeleteHook, authItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authItemAfterDeleteHooks = []AuthItemHook{}

	AddAuthItemHook(boil.BeforeUpsertHook, authItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authItemBeforeUpsertHooks = []AuthItemHook{}

	AddAuthItemHook(boil.AfterUpsertHook, authItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authItemAfterUpsertHooks = []AuthItemHook{}
}

func testAuthItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authItemDBTypes = map[string]string{`ID`: `varchar`, `GroupID`: `int`, `Name`: `varchar`, `ItemType`: `int`, `Reserved`: `tinyint`, `Obj`: `varchar`, `Act`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_               = bytes.MinRead
)

func testAuthItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authItemAllColumns) == len(authItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authItemAllColumns) == len(authItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthItem{}
	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authItemDBTypes, true, authItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authItemAllColumns, authItemPrimaryKeyColumns) {
		fields = authItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			authItemAllColumns,
			authItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(authItemAllColumns) == len(authItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAuthItemUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthItem{}
	if err = randomize.Struct(seed, &o, authItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthItem: %s", err)
	}

	count, err := AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authItemDBTypes, false, authItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthItem: %s", err)
	}

	count, err = AuthItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
