// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroups)
	t.Run("AuthItems", testAuthItems)
	t.Run("AuthRules", testAuthRules)
	t.Run("PostMeta", testPostMeta)
	t.Run("Posts", testPosts)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsDelete)
	t.Run("AuthItems", testAuthItemsDelete)
	t.Run("AuthRules", testAuthRulesDelete)
	t.Run("PostMeta", testPostMetaDelete)
	t.Run("Posts", testPostsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsQueryDeleteAll)
	t.Run("AuthItems", testAuthItemsQueryDeleteAll)
	t.Run("AuthRules", testAuthRulesQueryDeleteAll)
	t.Run("PostMeta", testPostMetaQueryDeleteAll)
	t.Run("Posts", testPostsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsSliceDeleteAll)
	t.Run("AuthItems", testAuthItemsSliceDeleteAll)
	t.Run("AuthRules", testAuthRulesSliceDeleteAll)
	t.Run("PostMeta", testPostMetaSliceDeleteAll)
	t.Run("Posts", testPostsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsExists)
	t.Run("AuthItems", testAuthItemsExists)
	t.Run("AuthRules", testAuthRulesExists)
	t.Run("PostMeta", testPostMetaExists)
	t.Run("Posts", testPostsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsFind)
	t.Run("AuthItems", testAuthItemsFind)
	t.Run("AuthRules", testAuthRulesFind)
	t.Run("PostMeta", testPostMetaFind)
	t.Run("Posts", testPostsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsBind)
	t.Run("AuthItems", testAuthItemsBind)
	t.Run("AuthRules", testAuthRulesBind)
	t.Run("PostMeta", testPostMetaBind)
	t.Run("Posts", testPostsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsOne)
	t.Run("AuthItems", testAuthItemsOne)
	t.Run("AuthRules", testAuthRulesOne)
	t.Run("PostMeta", testPostMetaOne)
	t.Run("Posts", testPostsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsAll)
	t.Run("AuthItems", testAuthItemsAll)
	t.Run("AuthRules", testAuthRulesAll)
	t.Run("PostMeta", testPostMetaAll)
	t.Run("Posts", testPostsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsCount)
	t.Run("AuthItems", testAuthItemsCount)
	t.Run("AuthRules", testAuthRulesCount)
	t.Run("PostMeta", testPostMetaCount)
	t.Run("Posts", testPostsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsHooks)
	t.Run("AuthItems", testAuthItemsHooks)
	t.Run("AuthRules", testAuthRulesHooks)
	t.Run("PostMeta", testPostMetaHooks)
	t.Run("Posts", testPostsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsInsert)
	t.Run("AuthItemGroups", testAuthItemGroupsInsertWhitelist)
	t.Run("AuthItems", testAuthItemsInsert)
	t.Run("AuthItems", testAuthItemsInsertWhitelist)
	t.Run("AuthRules", testAuthRulesInsert)
	t.Run("AuthRules", testAuthRulesInsertWhitelist)
	t.Run("PostMeta", testPostMetaInsert)
	t.Run("PostMeta", testPostMetaInsertWhitelist)
	t.Run("Posts", testPostsInsert)
	t.Run("Posts", testPostsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsReload)
	t.Run("AuthItems", testAuthItemsReload)
	t.Run("AuthRules", testAuthRulesReload)
	t.Run("PostMeta", testPostMetaReload)
	t.Run("Posts", testPostsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsReloadAll)
	t.Run("AuthItems", testAuthItemsReloadAll)
	t.Run("AuthRules", testAuthRulesReloadAll)
	t.Run("PostMeta", testPostMetaReloadAll)
	t.Run("Posts", testPostsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsSelect)
	t.Run("AuthItems", testAuthItemsSelect)
	t.Run("AuthRules", testAuthRulesSelect)
	t.Run("PostMeta", testPostMetaSelect)
	t.Run("Posts", testPostsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsUpdate)
	t.Run("AuthItems", testAuthItemsUpdate)
	t.Run("AuthRules", testAuthRulesUpdate)
	t.Run("PostMeta", testPostMetaUpdate)
	t.Run("Posts", testPostsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthItemGroups", testAuthItemGroupsSliceUpdateAll)
	t.Run("AuthItems", testAuthItemsSliceUpdateAll)
	t.Run("AuthRules", testAuthRulesSliceUpdateAll)
	t.Run("PostMeta", testPostMetaSliceUpdateAll)
	t.Run("Posts", testPostsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
