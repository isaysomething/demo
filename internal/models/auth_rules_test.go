// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthRules(t *testing.T) {
	t.Parallel()

	query := AuthRules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthRules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthRuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthRuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthRule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthRuleExists to return true, but got false.")
	}
}

func testAuthRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authRuleFound, err := FindAuthRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authRuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthRules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthRules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authRuleOne := &AuthRule{}
	authRuleTwo := &AuthRule{}
	if err = randomize.Struct(seed, authRuleOne, authRuleDBTypes, false, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}
	if err = randomize.Struct(seed, authRuleTwo, authRuleDBTypes, false, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authRuleOne := &AuthRule{}
	authRuleTwo := &AuthRule{}
	if err = randomize.Struct(seed, authRuleOne, authRuleDBTypes, false, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}
	if err = randomize.Struct(seed, authRuleTwo, authRuleDBTypes, false, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authRuleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func authRuleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthRule) error {
	*o = AuthRule{}
	return nil
}

func testAuthRulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthRule{}
	o := &AuthRule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authRuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthRule object: %s", err)
	}

	AddAuthRuleHook(boil.BeforeInsertHook, authRuleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authRuleBeforeInsertHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.AfterInsertHook, authRuleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authRuleAfterInsertHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.AfterSelectHook, authRuleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authRuleAfterSelectHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.BeforeUpdateHook, authRuleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authRuleBeforeUpdateHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.AfterUpdateHook, authRuleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authRuleAfterUpdateHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.BeforeDeleteHook, authRuleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authRuleBeforeDeleteHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.AfterDeleteHook, authRuleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authRuleAfterDeleteHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.BeforeUpsertHook, authRuleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authRuleBeforeUpsertHooks = []AuthRuleHook{}

	AddAuthRuleHook(boil.AfterUpsertHook, authRuleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authRuleAfterUpsertHooks = []AuthRuleHook{}
}

func testAuthRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authRuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthRuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authRuleDBTypes = map[string]string{`ID`: `int`, `PType`: `varchar`, `V0`: `varchar`, `V1`: `varchar`, `V2`: `varchar`, `V3`: `varchar`, `V4`: `varchar`, `V5`: `varchar`}
	_               = bytes.MinRead
)

func testAuthRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authRulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authRuleAllColumns) == len(authRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authRuleAllColumns) == len(authRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthRule{}
	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authRuleDBTypes, true, authRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authRuleAllColumns, authRulePrimaryKeyColumns) {
		fields = authRuleAllColumns
	} else {
		fields = strmangle.SetComplement(
			authRuleAllColumns,
			authRulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthRuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(authRuleAllColumns) == len(authRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAuthRuleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthRule{}
	if err = randomize.Struct(seed, &o, authRuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthRule: %s", err)
	}

	count, err := AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authRuleDBTypes, false, authRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthRule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthRule: %s", err)
	}

	count, err = AuthRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
